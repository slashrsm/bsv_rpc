defmodule BsvRpc.MetaNetTest do
  use ExUnit.Case
  import Mock
  import ExUnit.CaptureLog
  require Logger
  alias BsvRpc.MetaNet.Graph
  doctest BsvRpc.MetaNet

  setup_with_mocks([
    {BsvRpc, [],
     [broadcast_transaction: fn tx -> {:ok, BsvRpc.Transaction.id(tx) |> String.downcase()} end]},
    {BsvRpc, [],
     [
       get_transaction: fn "c89805f4f1ebdee191610be0bcda73eda1cf9e0480c483a54187348508e0c7f7" ->
         {:ok,
          BsvRpc.Transaction.create_from_hex(
            "010000000276E60CB90378B3E1AAFA8DBBB4D8744F6D1CBC890D772983097124517E4AB3F5000000006B483045022100EA707612BCC857AD713FB237323038B013FB16F3122A018E18946453976F6B580220084B75C3EEB0E59CEA3FDDE631CA72BAB2AAE5C14A1AEB958F920534E2AB464C412102BDD929EA590461CD456BFE6DF6C0A79D410DCB9ABD683846135957B540AC0EA0FFFFFFFFB7C33B28758F5DC75FE587B8CC35C78071F29C133B253B19B3E46A18D34904F7000000006B483045022100FA464B0A63B500FBFA6E5982178742A5E1672047F2AB20A6C8973DBF69C9E537022038CD5B4AB6D8C3C07F8D9A26C5470FF485D23D81E379FF3EF2A8684F4BE002534121038D980A861F88DB0D84BBBD81208B8BB23B83C9B9CC1B0A8E2EB86BB7D11454E3FFFFFFFF01E8030000000000001976A914A7B4E7E0BAE611FE10AE08711A972E08AD3BDD9788AC00000000"
          )}
       end
     ]},
    {HTTPoison, [],
     [
       get!:
         fn "https://api.whatsonchain.com/v1/bsv/main/address/1GHkZbArmpocrZS6FMK9bGeqaKgqiUXb8S/unspent" ->
           %HTTPoison.Response{
             status_code: 200,
             body:
               "[{\"height\":604869,\"tx_pos\":0\,\"tx_hash\":\"c89805f4f1ebdee191610be0bcda73eda1cf9e0480c483a54187348508e0c7f7\",\"value\":1000}]"
           }
         end
     ]}
  ]) do
    meta_key = %ExtendedKey{
      chain_code:
        <<105, 183, 126, 110, 23, 105, 199, 184, 137, 146, 206, 27, 4, 159, 85, 14, 42, 28, 94,
          29, 254, 252, 8, 108, 114, 125, 173, 37, 5, 124, 61, 103>>,
      child_num: 0,
      depth: 0,
      key:
        <<7, 195, 21, 39, 143, 145, 107, 160, 195, 209, 211, 201, 62, 15, 193, 75, 9, 63, 56, 49,
          39, 19, 191, 150, 24, 184, 96, 119, 20, 151, 49, 103>>,
      parent_fingerprint: <<0, 0, 0, 0>>,
      version: <<4, 136, 173, 228>>
    }

    funding_key = %BsvRpc.PrivateKey{
      key:
        <<20, 25, 37, 10, 205, 108, 92, 206, 133, 180, 29, 209, 13, 2, 29, 254, 191, 18, 130, 12,
          255, 57, 251, 199, 92, 120, 134, 83, 127, 175, 198, 27>>,
      network: :mainnet
    }

    utxo = %BsvRpc.UTXO{
      script_pubkey: Base.decode16!("76A9141D7C7B4894BE23A6495B004157F3A1BBA173C52988AC"),
      value: 5_000_000_000,
      transaction:
        Base.decode16!("F2F412D9C28472BCB40204DF8636C5154AEA737504A1865529BFE3D13D848F28"),
      output: 0
    }

    %{graph: Graph.create(meta_key, funding_key), funding_utxo: utxo}
  end

  @tag capture_log: true
  test "root node", %{graph: graph, funding_utxo: funding_utxo} do
    {:ok, %BsvRpc.MetaNet.Graph{nodes: %{"" => root_node}}, created_node} =
      BsvRpc.MetaNet.publish_node(graph, funding_utxo, "", [])

    assert root_node == created_node

    assert BsvRpc.Transaction.to_hex(created_node) ==
             "0100000001288F843DD1E3BF295586A1047573EA4A15C53686DF0402B4BC7284C2D912F4F2000000006B48304502210081EB599D18EF5BC8F452786E0918F7AF52BE0055960F3969CA6C759879E5B0B302200269639C6B63A73E81821A12E267CD1AAE63DA109C20E4F585E959B12790C6CD412103E7DF20F2CB088029D206CE918D5D1B80576868825A9A6B69F6DF0FF30CD734A2FFFFFFFF0100000000000000002F006A046D6574612231323448423665353865485A4A64313755714E774C56417273395358516E77417135044E554C4C00000000"
  end

  test "utxo funded root node log", %{graph: graph, funding_utxo: funding_utxo} do
    assert capture_log(fn -> BsvRpc.MetaNet.publish_node(graph, funding_utxo, "", []) end) =~
             "Node TX for MetaNet node 124HB6e58eHZJd17UqNwLVArs9SXQnwAq5: 99da10bab0da00cd2583ae46340757cfef9a1a3fe7da4b079d7bb8e36c6e85ce"
  end

  @tag capture_log: true
  test "child node", %{graph: graph, funding_utxo: funding_utxo} do
    {:ok, graph, _created_node} = BsvRpc.MetaNet.publish_node(graph, funding_utxo, "", [])

    {:ok, %BsvRpc.MetaNet.Graph{nodes: %{"0" => child_node}}, created_node} =
      BsvRpc.MetaNet.publish_node(graph, funding_utxo, "0", [])

    assert child_node == created_node

    assert BsvRpc.Transaction.to_hex(created_node) ==
             "0100000001288F843DD1E3BF295586A1047573EA4A15C53686DF0402B4BC7284C2D912F4F2000000006A47304402201736C3CAE5520ECC8EF7CC0D254B971D8891C9C39BB793806B877F963F2F11FC02204A13C2AB650CC21F655D7E10184C2ABFB5DE9131524F629023F9A146B48FC45D412103E7DF20F2CB088029D206CE918D5D1B80576868825A9A6B69F6DF0FF30CD734A2FFFFFFFF0100000000000000006B006A046D6574612231346472775954535042746341564D725A674E7875614A6E5935727A31486D736437403939646131306261623064613030636432353833616534363334303735376366656639613161336665376461346230373964376262386533366336653835636500000000"
  end

  @tag capture_log: true
  test "utxo funded child node log", %{graph: graph, funding_utxo: funding_utxo} do
    {:ok, graph, _created_node} = BsvRpc.MetaNet.publish_node(graph, funding_utxo, "", [])

    assert capture_log(fn -> BsvRpc.MetaNet.publish_node(graph, funding_utxo, "0", []) end) =~
             "Node TX for MetaNet node 14drwYTSPBtcAVMrZgNxuaJnY5rz1Hmsd7: 47a7615fb48efb4271c705abbfedc051cabd1379ef3702d62f0d7d92fc07f0ef"
  end

  @tag capture_log: true
  test "root node from funding key", %{graph: graph} do
    {:ok, %BsvRpc.MetaNet.Graph{nodes: %{"" => root_node}}, created_node} =
      BsvRpc.MetaNet.publish_node(graph, "", [])

    assert root_node == created_node

    assert BsvRpc.Transaction.to_hex(created_node) ==
             "0100000001DEA60B9C4FC341FD5AA46B71CEDF773F6D685A763A693622C96A91087DF8CEEB000000006A4730440220561DBC71C23FDDAC04AA9D74DDA4DB6E7EF994BB85D4657293BB4C3ACF21BA830220419C7083741C5083B8BA30B203FE0B2DA3355EFBBEFD51CC9B964964808AE225412103E7DF20F2CB088029D206CE918D5D1B80576868825A9A6B69F6DF0FF30CD734A2FFFFFFFF0100000000000000002F006A046D6574612231323448423665353865485A4A64313755714E774C56417273395358516E77417135044E554C4C00000000"
  end

  test "key funded node log", %{graph: graph} do
    assert capture_log(fn -> BsvRpc.MetaNet.publish_node(graph, "", []) end) =~
             "Node TX for MetaNet node 124HB6e58eHZJd17UqNwLVArs9SXQnwAq5: 13acae048159ad0337b53ff8bcbf1e77b182dcf1e42e5ea18790a051c19e5364"
  end

  test "key funded funding log", %{graph: graph} do
    assert capture_log(fn -> BsvRpc.MetaNet.publish_node(graph, "", []) end) =~
             "Funding TX for MetaNet node 124HB6e58eHZJd17UqNwLVArs9SXQnwAq5: ebcef87d08916ac92236693a765a686d3f77dfce716ba45afd41c34f9c0ba6de"
  end

  @tag capture_log: true
  test "child node from funding key", %{graph: graph} do
    {:ok, graph, _created_node} = BsvRpc.MetaNet.publish_node(graph, "", [])

    {:ok, %BsvRpc.MetaNet.Graph{nodes: %{"0" => root_node}}, created_node} =
      BsvRpc.MetaNet.publish_node(graph, "0", [])

    assert root_node == created_node

    assert BsvRpc.Transaction.to_hex(created_node) ==
             "0100000001DEA60B9C4FC341FD5AA46B71CEDF773F6D685A763A693622C96A91087DF8CEEB000000006A4730440220219D04BEF5FECE251D3AFD5A9B12D3461EFABB60A64FA5229F033BAA0DC7008902207D0AEEE157CA67CEAF3C0DB8F2321592606417234F212A255BB2DFE53C4A4835412103E7DF20F2CB088029D206CE918D5D1B80576868825A9A6B69F6DF0FF30CD734A2FFFFFFFF0100000000000000006B006A046D6574612231346472775954535042746341564D725A674E7875614A6E5935727A31486D736437403133616361653034383135396164303333376235336666386263626631653737623138326463663165343265356561313837393061303531633139653533363400000000"
  end

  @tag capture_log: true
  test "key funded child node log", %{graph: graph} do
    {:ok, graph, _created_node} = BsvRpc.MetaNet.publish_node(graph, "", [])

    assert capture_log(fn -> BsvRpc.MetaNet.publish_node(graph, "0", []) end) =~
             "Node TX for MetaNet node 14drwYTSPBtcAVMrZgNxuaJnY5rz1Hmsd7: 74757cd4322695d56bad854c099fefc47466212ab15c4f30f912bc01eb0c1cca"
  end

  @tag capture_log: true
  test "key funded child funding log", %{graph: graph} do
    {:ok, graph, _created_node} = BsvRpc.MetaNet.publish_node(graph, "", [])

    assert capture_log(fn -> BsvRpc.MetaNet.publish_node(graph, "0", []) end) =~
             "Funding TX for MetaNet node 14drwYTSPBtcAVMrZgNxuaJnY5rz1Hmsd7: ebcef87d08916ac92236693a765a686d3f77dfce716ba45afd41c34f9c0ba6de"
  end

  @tag capture_log: true
  test "node with a lot of data from funding key", %{graph: graph} do
    # 700 bytes of data.
    {:ok, %BsvRpc.MetaNet.Graph{nodes: %{"" => root_node}}, created_node} =
      BsvRpc.MetaNet.publish_node(graph, "", [<<0::size(5600)>>])

    assert root_node == created_node

    assert BsvRpc.Transaction.to_hex(created_node) ==

  end

  @tag capture_log: true
  test "funding transaction without change", %{graph: graph} do
    {:ok, %BsvRpc.MetaNet.Graph{nodes: %{"" => root_node}}, created_node} =
      BsvRpc.MetaNet.publish_node(graph, "", [])

    assert root_node == created_node

    assert BsvRpc.Transaction.to_hex(created_node) ==
             "0100000001DEA60B9C4FC341FD5AA46B71CEDF773F6D685A763A693622C96A91087DF8CEEB000000006A4730440220561DBC71C23FDDAC04AA9D74DDA4DB6E7EF994BB85D4657293BB4C3ACF21BA830220419C7083741C5083B8BA30B203FE0B2DA3355EFBBEFD51CC9B964964808AE225412103E7DF20F2CB088029D206CE918D5D1B80576868825A9A6B69F6DF0FF30CD734A2FFFFFFFF0100000000000000002F006A046D6574612231323448423665353865485A4A64313755714E774C56417273395358516E77417135044E554C4C00000000"
  end

  @tag capture_log: true
  test "create graph from scratch", _context do
    meta_key = %ExtendedKey{
      chain_code:
        <<105, 183, 126, 110, 23, 105, 199, 184, 137, 146, 206, 27, 4, 159, 85, 14, 42, 28, 94,
          29, 254, 252, 8, 108, 114, 125, 173, 37, 5, 124, 61, 103>>,
      child_num: 0,
      depth: 0,
      key:
        <<7, 195, 21, 39, 143, 145, 107, 160, 195, 209, 211, 201, 62, 15, 193, 75, 9, 63, 56, 49,
          39, 19, 191, 150, 24, 184, 96, 119, 20, 151, 49, 103>>,
      parent_fingerprint: <<0, 0, 0, 0>>,
      version: <<4, 136, 173, 228>>
    }

    funding_key = %BsvRpc.PrivateKey{
      key:
        <<20, 25, 37, 10, 205, 108, 92, 206, 133, 180, 29, 209, 13, 2, 29, 254, 191, 18, 130, 12,
          255, 57, 251, 199, 92, 120, 134, 83, 127, 175, 198, 27>>,
      network: :mainnet
    }

    graph = BsvRpc.MetaNet.create_root_node(meta_key, funding_key)

    assert BsvRpc.Transaction.id(graph.nodes[""]) ==
             "13ACAE048159AD0337B53FF8BCBF1E77B182DCF1E42E5EA18790A051C19E5364"

    assert BsvRpc.Transaction.to_hex(graph.nodes[""]) ==
             "0100000001DEA60B9C4FC341FD5AA46B71CEDF773F6D685A763A693622C96A91087DF8CEEB000000006A4730440220561DBC71C23FDDAC04AA9D74DDA4DB6E7EF994BB85D4657293BB4C3ACF21BA830220419C7083741C5083B8BA30B203FE0B2DA3355EFBBEFD51CC9B964964808AE225412103E7DF20F2CB088029D206CE918D5D1B80576868825A9A6B69F6DF0FF30CD734A2FFFFFFFF0100000000000000002F006A046D6574612231323448423665353865485A4A64313755714E774C56417273395358516E77417135044E554C4C00000000"
  end
end
